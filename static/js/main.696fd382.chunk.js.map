{"version":3,"sources":["containers/Currency/Currency.container.js","containers/App.js","index.js"],"names":["Currency","props","addCurrency","event","dataNew","state","currentCurrency","unshift","selectedOption","value","console","log","setState","handleBaseCurrencyFromUser","data","baseCurrencyFromUser","target","handleAmount","amounts","isNaN","parseFloat","length","amount","onKeyPressAmount","keyCode","which","keyValue","String","fromCharCode","test","preventDefault","handleChangeSelect","allCurrency","currencyObj","amountOfCurrency","baseCurrencyFromApi","dateOfConversionRate","this","getCurrency","response","Promise","resolve","json","then","status","ok","url","options","reject","fetch","parseJSON","Object","keys","rates","base","date","meta","error","catch","networkError","message","request","map","disabled","includes","label","index","splice","_","isEmpty","item","getRate","onClick","deleteCurrency","currency","total","toFixed","displayType","thousandSeparator","className","ref","onChange","onKeyPress","type","generateConversionData","getOptions","isOptionDisabled","React","Component","App","thunk","render","document","getElementById"],"mappings":"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","file":"static/js/main.696fd382.chunk.js","sourcesContent":["import React from 'react';\r\nimport _ from 'lodash';\r\nimport Select from 'react-select';\r\nimport 'react-select/dist/react-select.css';\r\nimport NumberFormat from 'react-number-format';\r\nimport './Currency.container.css';\r\n\r\nexport class Currency extends React.Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      currentCurrency: ['USD', 'CAD', 'IDR', 'GBP', 'CHF', 'SGD', 'INR' , 'MYR', 'JPY', 'KRW'],\r\n      allCurrency: [],\r\n      currencyObj: [],\r\n      amountOfCurrency: [],\r\n      baseCurrencyFromApi:'',\r\n      selectedOption: '',\r\n      baseCurrencyFromUser:'USD',\r\n      amount: 10,\r\n      dateOfConversionRate:'',\r\n    };\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.getCurrency()\r\n  }\r\n\r\n  addCurrency = event =>{\r\n    let dataNew = this.state.currentCurrency\r\n    dataNew.unshift(this.state.selectedOption.value)\r\n    console.log(dataNew);\r\n    this.setState({currentCurrency : dataNew})\r\n  }\r\n  /**\r\n * Parses the JSON returned by a network request\r\n *\r\n * @param  {object} response A response from a network request\r\n *\r\n * @return {object}          The parsed JSON, status from the response\r\n */\r\n  parseJSON(response) {\r\n      return new Promise((resolve) => response.json()\r\n        .then((json) => resolve({\r\n          status: response.status,\r\n          ok: response.ok,\r\n          json,\r\n        })));\r\n    }\r\n  \r\n  /**\r\n   * Requests a URL, returning a promise\r\n   *\r\n   * @param  {string} url       The URL we want to request\r\n   * @param  {object} [options] The options we want to pass to \"fetch\"\r\n   *\r\n   * @return {Promise}           The request promise\r\n   */\r\n  request(url, options) {\r\n    let endpoint = 'https://api.exchangeratesapi.io/';\r\n    return new Promise((resolve, reject) => {\r\n      fetch(endpoint  + url, options)\r\n        .then(this.parseJSON)\r\n        .then((response) => {\r\n          if (response.ok) {\r\n            this.setState({\r\n                allCurrency :  Object.keys(response.json.rates),\r\n                currencyObj :  response.json.rates,\r\n                baseCurrencyFromApi : response.json.base,\r\n                dateOfConversionRate : response.json.date\r\n            })\r\n          }\r\n          // extract the error from the server's json\r\n          return reject(response.json.meta.error);\r\n        })\r\n        .catch((error) => reject({\r\n          networkError: error.message,\r\n        }));\r\n    });\r\n  }\r\n  \r\n  //Get Api endpoint\r\n  getCurrency () {\r\n      return this.request('latest');\r\n  }\r\n\r\n  getOptions (data) {\r\n    return data.map((data) => {\r\n      let disabled = false;\r\n      if(this.state.currentCurrency.includes(data)) {\r\n        disabled = true;\r\n      }\r\n      return {\r\n        value: data,\r\n        label: data,\r\n        disabled: disabled\r\n      };\r\n    });\r\n  }\r\n\r\n  //handle base rate from user\r\n  handleBaseCurrencyFromUser = data => {\r\n    this.setState({\r\n      baseCurrencyFromUser : data.target.value\r\n    });\r\n  }\r\n\r\n  //handle base rate from user\r\n  handleAmount = data => {\r\n    let amounts = data.target.value;\r\n    if(isNaN(data.target.value) || parseFloat(data.target.value) < 0 || data.target.value.length < 1){\r\n        this.setState({amount: 0});\r\n    }\r\n    this.setState({amount: amounts});\r\n  } \r\n\r\n   //handle base rate from user\r\n  onKeyPressAmount = event => {\r\n    const keyCode = event.keyCode || event.which;\r\n    const keyValue = String.fromCharCode(keyCode);\r\n     if (/\\+|-/.test(keyValue))\r\n       event.preventDefault();\r\n  } \r\n\r\n  deleteCurrency (index) {\r\n    let dataNew = this.state.currentCurrency;\r\n    dataNew.splice(index,1)\r\n    this.setState({currentCurrency : dataNew})\r\n  };\r\n\r\n  generateConversionData () {\r\n    const {currentCurrency} = this.state;\r\n    if (!_.isEmpty(currentCurrency)) {\r\n      return currentCurrency.map((item, index) => {\r\n        return (\r\n          <div>\r\n            <li>\r\n              {this.getRate(item)}\r\n              <a onClick={() => { this.deleteCurrency(index) }}>\r\n                {item}( - )\r\n              </a>\r\n            </li>\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  getRate(currency) {\r\n    const {currencyObj} = this.state\r\n    let rates = parseFloat(currencyObj[currency]) / currencyObj[this.state.baseCurrencyFromUser]\r\n    \r\n    let total = (rates * this.state.amount).toFixed(2);\r\n    return (\r\n      <NumberFormat value={total} displayType={'text'} thousandSeparator={true} />\r\n    );\r\n  }\r\n\r\n  handleChangeSelect = data => {\r\n    this.setState({selectedOption: data})\r\n  }\r\n\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <div className=\"ui\">\r\n          <nav className=\"navbar app\">Currency Converter</nav>\r\n          <nav className=\"navbar board\">USD Amount \r\n          <input\r\n            value={this.state.amount}\r\n            ref='name'\r\n            onChange={this.handleAmount}\r\n            onKeyPress={this.onKeyPressAmount}\r\n            type=\"number\"\r\n          /></nav>\r\n          <div className=\"lists\">\r\n            <div className=\"list\">\r\n              <header>Rate USD in Other Currency</header>\r\n              <ul>\r\n                {this.generateConversionData()}\r\n              </ul>\r\n              <footer>\r\n                <Select\r\n                  value={this.state.selectedOption}\r\n                  className=\"select-new-currency\"\r\n                  onChange={this.handleChangeSelect}\r\n                  options={this.getOptions(this.state.allCurrency)}\r\n                  isOptionDisabled={this.state.currentCurrency}\r\n                />\r\n                 <button onClick={this.addCurrency}>\r\n                    Submit\r\n                </button>\r\n              </footer>\r\n            </div>\r\n            </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Currency;\r\n","import React from 'react'\nimport Currency from './Currency/Currency.container'\n\nconst App = () => (\n  <div>\n    <Currency />\n  </div>\n)\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { IntlProvider } from 'react-intl'\nimport { createLogger } from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport App from './containers/App'\n\nconst middleware = [ thunk ];\nif (process.env.NODE_ENV !== 'production') {\n  middleware.push(createLogger());\n}\n\nrender(\n  <Provider>\n    <IntlProvider>\n      <App />\n    </IntlProvider>\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}